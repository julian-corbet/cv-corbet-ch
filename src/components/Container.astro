---
import { Icon } from "astro-icon/components";
import AccordionLayout from "../layouts/AccordionLayout.astro";
import Card from "./Card.astro";

type SectionConfig = {
  folder: string;
  title: string;
  icon?: string;
};

type SectionEntry = {
  frontmatter: Record<string, any>;
  content: string;
  sortKey: string;
};

// Load section configuration
const configData = await import.meta.glob("../pages/config/headers.md", { eager: true });
const sectionConfig = (configData["../pages/config/headers.md"] as { frontmatter?: { sections?: SectionConfig[]; special?: { downloads?: { title?: string; icon?: string } } } })?.frontmatter || { sections: [] };

const normaliseOrder = (value: unknown) =>
  typeof value === "number" && Number.isFinite(value) ? value : Number.POSITIVE_INFINITY;

const markdownModules = await Astro.glob("../pages/**/*.md");

const sectionContentMap = new Map<string, SectionEntry[]>();

await Promise.all(
  markdownModules.map(async (mod) => {
    const filePath = typeof mod?.file === "string" ? mod.file : typeof mod?.url === "string" ? mod.url : "";

    if (!filePath || filePath.includes("/pages/config/")) return;

    const folderSegment = filePath.split("/pages/")[1];
    if (!folderSegment) return;

    const folder = folderSegment.split("/")[0];
    if (!folder) return;

    const content = typeof mod?.compiledContent === "function" ? await mod.compiledContent() : "";

    const entry: SectionEntry = {
      frontmatter: mod?.frontmatter ?? {},
      content,
      sortKey: filePath,
    };

    if (!sectionContentMap.has(folder)) {
      sectionContentMap.set(folder, []);
    }

    sectionContentMap.get(folder)!.push(entry);
  })
);

const sortEntries = (entries: SectionEntry[]) =>
  entries
    .filter((entry) => entry.frontmatter?.hidden !== true)
    .sort((a, b) => {
      const orderA = normaliseOrder(a.frontmatter?.order);
      const orderB = normaliseOrder(b.frontmatter?.order);

      if (orderA !== orderB) {
        return orderA - orderB;
      }

      return a.sortKey.localeCompare(b.sortKey);
    });

const sectionsWithContent = (sectionConfig.sections || [])
  .filter((section: SectionConfig) => typeof section?.folder === "string" && section.folder.length > 0)
  .map((section: SectionConfig) => ({
    ...section,
    items: sortEntries(sectionContentMap.get(section.folder) || []),
  }));

const fileMeta = Object.values(await import.meta.glob("../pages/config/downloads.md", { eager: true })) as any[];
---

<div class="join join-vertical gap-1">
{
  sectionsWithContent.map((section) => {
    if (!section?.items || section.items.length === 0) return null;

    return (
      <AccordionLayout title={section.title} icon={section.icon}>
        {
          section.items.map((item) => (
            <Card frontmatter={item.frontmatter} content={item.content} />
          ))
        }
      </AccordionLayout>
    );
  })
}

  {fileMeta.length > 0 && (
    <Fragment>
      <AccordionLayout title={sectionConfig.special?.downloads?.title || "Downloads"} icon={sectionConfig.special?.downloads?.icon || "carbon:volume-file-storage"} id={"downloads"}>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {
            fileMeta.map((meta) => {
              return meta.frontmatter.downloads.map((file) => {
                if (file.type === "folder") {
                  return (
                    <div class="h-full">
                      <div class="collapse collapse-arrow bg-base-100 border border-[oklch(var(--s))] w-full rounded-box h-full text-base-content folder-collapse">
                        <input type="checkbox" />
                        <figure class="collapse-open:hidden flex flex-col items-center justify-center h-[150px] bg-base-100 rounded-t-box">
                          <div class="text-center">
                            <Icon name="carbon:folder" class="w-36 h-36 text-base-content mb-2" />
                            <h2 class="text-base-content font-bold text-center">{file.title} <br/> {file.children.length} Files</h2>
                          </div>
                        </figure>
                        <div class="collapse-title font-extrabold tracking-tight px-4"></div>
                        <div class="collapse-content px-4 pb-4">
                          {file.children.map((child) => {
                            const childPdfUrl = `/${child.filename}`;
                            return (
                              <div class="card card-compact card-bordered border-[oklch(var(--s))] w-full hover:shadow-lg transition-all mb-4">
                                <div class="card-body p-3">
                                  <h3 class="card-title text-lg">{child.title}</h3>
                                  <p class="text-sm">{child.description}</p>
                                  <div class="card-actions justify-center">
                                    <a target="_blank" href={childPdfUrl}>
                                      <button class="btn btn-sm btn-outline">
                                        {child.button}
                                        <Icon name="carbon:document-pdf" class="w-4 h-4 ml-1" />
                                      </button>
                                    </a>
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  );
                } else {
                  const pdfUrl = `/${file.filename}`;
                  return (
                    <div class="h-full">
                      <div
                        class="card card-compact card-bordered border-[oklch(var(--s))] w-full hover:shadow-lg transition-all h-full"
                      >
                        <figure>
                          <object data={pdfUrl} type="application/pdf" width="100%" height="150px"></object>
                        </figure>
                        <div class="card-body">
                          <h2 class="card-title">{file.title}</h2>
                          <p>{file.description}</p>
                          <div class="card-actions justify-center">
                            <a target="_blank" href={pdfUrl}>
                              <button class="btn btn-outline">
                                {file.button}
                                <Icon name="carbon:document-pdf" class="w-4 h-4 ml-1" />
                              </button>
                            </a>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                }
              });
            })
          }
        </div>
      </AccordionLayout>

      <script is:inline>
        document.querySelectorAll('.folder-collapse input').forEach((input) => {
          const figure = input.closest('.folder-collapse').querySelector('figure');
          input.addEventListener('change', () => {
            figure.style.display = input.checked ? 'none' : 'flex';
          });
        });
      </script>
    </Fragment>
  )}
</div>
