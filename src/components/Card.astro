---
import { Icon } from "astro-icon/components";
const { timeframe, title, description, url, tags, url_name, location, subtitle, header_url, id } =
  Astro.props;
---

<div id={id} class="card card-compact card-bordered bg-transparent w-full md:w-128 lg:w-160 hover:shadow-lg transition-all my-4">
  <div class={`card-body ${url ? 'grid grid-cols-[1fr_160px] gap-4' : ''}`}>
    {title && (
      <div class={`mb-2 ${url ? 'col-span-2' : ''}`}>
        <div class="flex justify-between items-center prose">
          {header_url ? (
            <a href={header_url} target="_blank" class="inline-block uppercase card-title font-extrabold tracking-tighter md:text-2xl hover:underline">
              {title}
              <Icon name="carbon:link" class="w-4 h-4 ml-2 inline" />
            </a>
          ) : (
            <span class="inline-block uppercase card-title font-extrabold tracking-tighter md:text-2xl">{title}</span>
          )}
          {timeframe && (
            <span class="inline-block font-mono text-sm">
              {timeframe}
            </span>
          )}
        </div>
        <div class="text-left -mt-0.5">
          {subtitle && <h2 class="italic text-base font-normal text-secondary m-0">{subtitle}</h2>}
          {location && (
            <div class="flex items-center mt-1">
              <Icon name="carbon:location" class="w-4 h-4 mr-1" />
              <p class="text-sm  font-light text-secondary">{location}</p>
            </div>
          )}
        </div>
      </div>
    )}

    <div class="flex items-center">
      <div class={`flex-1 text-left ${url ? 'max-w-prose' : 'max-w-none'}`}>
        <article class="prose prose-lg md:prose-xl text-base leading-relaxed max-w-none font-normal text-justify hyphens-auto prose-p:last:mb-0">
          <Fragment set:html={description}></Fragment>
        </article>
      </div>
      {(!title && (timeframe || url)) && (
        <div class="flex items-center gap-2 ml-4">
          {!title && timeframe && (
            <div class="badge w-max text-center font-mono">
              {timeframe}
            </div>
          )}
          {!title && url && (
            <a href={url} target="_blank" class="link link-hover text-sm flex items-center">
              {url_name}
              {url && url !== "#" && url.trim() !== "" && <Icon name="carbon:link" class="w-4 h-4 ml-2" />}
            </a>
          )}
        </div>
      )}
    </div>

    {url && title && (
      <div class="flex flex-col h-full justify-center items-end">
        <a href={url} target="_blank" class="link link-hover text-sm flex items-center">
          {url_name}
          {url && url !== "#" && url.trim() !== "" && <Icon name="carbon:link" class="w-4 h-4 ml-2" />}
        </a>
      </div>
    )}

    {Array.isArray(tags) && tags.length > 0 && (
      <div class={`flex flex-wrap content-around gap-2 my-4 ${url ? 'col-span-2' : ''}`}>
        {tags.map((item) => {
          if (item.includes(':')) {
            const [label, link_id] = item.split(':');
            if (link_id.trim()) {
              return (
                <a href={`#${link_id.trim()}`} class="badge text-center inline-block align-middle w-max h-max text-sm badge-outline shadow-md mb-1 link link-hover">
                  {label}
                </a>
              );
            } else {
              return (
                <span class="badge text-center inline-block align-middle w-max h-max text-sm badge-outline shadow-md mb-1">
                  {label}
                </span>
              );
            }
          } else {
            return (
              <span class="badge text-center inline-block align-middle w-max h-max text-sm badge-outline shadow-md mb-1">
                {item}
              </span>
            );
          }
        })}
      </div>
    )}

    <script define:vars={{ tags }}>
      if (Array.isArray(tags) && tags.length > 0) {
        tags.forEach((item, index) => {
          console.log(`Tag ${index}:`, item, 'Type:', typeof item);
          if (item.includes(':')) {
            const [label, link_id] = item.split(':');
            console.log('Split - Label:', label, 'Link ID:', link_id.trim(), 'Target:', `#${link_id.trim()}`);
          }
        });
      } else {
        console.log('Tags not rendered:', tags, 'Type:', typeof tags);
      }
    </script>
  </div>
</div>
